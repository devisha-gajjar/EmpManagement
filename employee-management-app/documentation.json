{
    "pipes": [],
    "interfaces": [
        {
            "name": "ConfirmDialogData",
            "id": "interface-ConfirmDialogData-7bfff23efefba2090d8982895f298531447cf0a1066e556e8cef4fbdc57a11716299122001fb5e142fb2884e1131fcd695fe4051b526d78f53b6f8dc64f1cf0f",
            "file": "src/app/shared/components/confirm-dialog/confirm-dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\nexport interface ConfirmDialogData {\r\n  title?: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule, MatIcon],\r\n  templateUrl: './confirm-dialog.html',\r\n  styleUrl: './confirm-dialog.scss'\r\n})\r\n\r\nexport class ConfirmDialogComponent {\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogData,\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>\r\n  ) { }\r\n}\r\n",
            "properties": [
                {
                    "name": "cancelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "confirmText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Department",
            "id": "interface-Department-dbbc92e808eaf01f2f834b1f606c7f212eb418a2b418ff121722f43dced67e9f603b037321aca0e7ced252be4d3c73b3667ad00a301e4787b865172105ecde9d",
            "file": "src/app/types/department.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Department{\r\n    id: number,\r\n    name:string\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Employee",
            "id": "interface-Employee-4f63553ca6baab673be6067a4595cfc8598c7592cd3cba2182c1b4dafac1bc10f69c0ecf5beeeef27d09148890a3278d065a0c709fb0b9989ba59cb4c073736d",
            "file": "src/app/types/employee.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Employee {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  departmentId: number;\r\n  departmentName?: string;\r\n  salary?: number;\r\n  createdOn?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "departmentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "departmentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-1f96a20d78a05547276ec83d827d8f06766fac71cd7930d0ebe9ea14061d76ab38938a9278de02db6b72f69c52a02704427abc96e9e882f684bc0155af880e42",
            "file": "src/app/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:5119/api/Auth/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "facebookLogin",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "googleLogin",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n    private apiUrl = 'http://localhost:5119/api/Auth/';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    login(credentials: any): Observable<any> {\r\n        return this.http.post(this.apiUrl + \"login\", credentials);\r\n    }\r\n\r\n    googleLogin(data: { idToken: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}google-login`, data);\r\n    }\r\n\r\n    facebookLogin(data: { accessToken: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}facebook-login`, data);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DepartmentService",
            "id": "injectable-DepartmentService-f3b2f594475ff13ebddadfae7af1284b6c776ff527c9206592d07bcf7837756d5ded9a3c5c1866f299aefa94065df316dedaecf28e55376adcb066e7d23d110d",
            "file": "src/app/services/department/department.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:5119/api/Department'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDepartments",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Department[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Department } from '../../types/department.model'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DepartmentService {\r\n  private apiUrl = 'http://localhost:5119/api/Department';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getDepartments(): Observable<Department[]> {\r\n    return this.http.get<Department[]>(this.apiUrl, { withCredentials: true });\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EmployeeService",
            "id": "injectable-EmployeeService-0cb9e9c0003ecfac72a349c42e011ce699f0e021cff419a3b7fc8facceb89e2a38e54e1cc3ef6db02aaebfe30fce8db6ef9d543ed9d4e3d601f321f4a072fd40",
            "file": "src/app/services/employee/employee.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:5119/api/Employee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addEmployee",
                    "args": [
                        {
                            "name": "employee",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Employee>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEmployee",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Employee[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateEmployee",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Employee } from '../../types/employee.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeeService {\r\n  private apiUrl = 'http://localhost:5119/api/Employee';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getEmployees(): Observable<Employee[]> {\r\n    return this.http.get<Employee[]>(this.apiUrl, { withCredentials: true });\r\n  }\r\n\r\n  addEmployee(employee: { name: string; email: string; departmentId: string; salary: number; }): Observable<Employee> {\r\n    return this.http.post<Employee>(this.apiUrl, employee, { withCredentials: true });\r\n  }\r\n\r\n  updateEmployee(id: number, employee: Employee): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/${id}`, employee, { withCredentials: true });\r\n  }\r\n\r\n  deleteEmployee(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`, { withCredentials: true });\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-8d064f434926a49a1334a05220f09cc320cf104da9f434f1aae846e283841a43e207db93b1f32be867d56490dca5f3165c2517bd3e04754f20bc682be897848e",
            "file": "src/app/pages/about/about-info.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-info",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./about-info.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-about-info',\r\n  imports: [MatCardModule, MatDividerModule, MatIconModule],\r\n  templateUrl: './about-info.html',\r\n  styleUrl: './about-info.scss'\r\n})\r\nexport class AboutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./about-info.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"about-container mat-app-background\">\r\n    <mat-card class=\"about-card\">\r\n        <mat-card-header>\r\n            <div mat-card-avatar class=\"about-avatar\">\r\n                <mat-icon>info</mat-icon>\r\n            </div>\r\n            <mat-card-title>About This Application</mat-card-title>\r\n            <mat-card-subtitle>Version 1.0.0</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-divider></mat-divider>\r\n        <mat-card-content>\r\n            <p>\r\n                This application is built with <strong>Angular</strong> and <strong>Angular Material</strong>\r\n            </p>\r\n            <div>\r\n                <strong>Features:</strong>\r\n                <ul>\r\n                    <li>CRUD operation for Employee</li>\r\n                    <li>List of Department with total employee count</li>\r\n                    <li>Easy navigation</li>\r\n                </ul>\r\n            </div>\r\n            <p>\r\n                For more information, visit\r\n                <a href=\"https://angular.io/\" target=\"_blank\">Angular docs</a>.\r\n            </p>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6f509a0530b6733bc49aaa2580dba52d13189686b3c8e169d2607791028d1a943cbcb269ecaea17194cd655c3b8a64a17bbd7db5010e7ad30103f53e7bb436ae",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.html',\r\n  styleUrls: ['./app.scss']\r\n})\r\n\r\nexport class AppComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-e48bf07bc3badec1d6022f8e25f707c46bb3d984b901779fb963f3e13c364e6fe7f49bd78d34210d4fe29a9a299a75229eca430a75e2ec4af52839996c684522",
            "file": "src/app/layout/auth-layout/auth-layout.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth-layout.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-auth-layout',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './auth-layout.html',\r\n  styleUrl: './auth-layout.scss'\r\n})\r\nexport class AuthLayoutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./auth-layout.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"auth-container\">\r\n    <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-7bfff23efefba2090d8982895f298531447cf0a1066e556e8cef4fbdc57a11716299122001fb5e142fb2884e1131fcd695fe4051b526d78f53b6f8dc64f1cf0f",
            "file": "src/app/shared/components/confirm-dialog/confirm-dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\nexport interface ConfirmDialogData {\r\n  title?: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule, MatIcon],\r\n  templateUrl: './confirm-dialog.html',\r\n  styleUrl: './confirm-dialog.scss'\r\n})\r\n\r\nexport class ConfirmDialogComponent {\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogData,\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>\r\n  ) { }\r\n}\r\n",
            "styleUrl": "./confirm-dialog.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div>\r\n    <h3 mat-dialog-title class=\"flex modal-header\">\r\n        <mat-icon class=\"warning-icon\">warning</mat-icon>\r\n        <span>{{ data.title }}</span>\r\n    </h3>\r\n    <mat-dialog-content>{{ data.message }}</mat-dialog-content>\r\n    <mat-dialog-actions align=\"end\">\r\n        <button matButton=\"filled\" [mat-dialog-close]=\"true\">{{ data.confirmText || 'Confirm' }}</button>\r\n        <button matButton=\"tonal\" mat-dialog-close>{{ data.cancelText || 'Cancel' }}</button>\r\n    </mat-dialog-actions>\r\n</div>"
        },
        {
            "name": "DepartmentListComponent",
            "id": "component-DepartmentListComponent-9d0e9530e16ccc4414f677ef30351b89f050252d290d89cc76955598422065aeb749868013b3ba8fe15212cd63a3fb9f0f9bd37093730078e33184c5fad00294",
            "file": "src/app/pages/department/department-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-department-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./department-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "department",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Department[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "departmentSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "totalEmployees",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "totalEmpSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "loadDepartment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTotalEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Department } from '../../types/department.model';\r\nimport { DepartmentService } from '../../services/department/department.service';\r\nimport { EmployeeService } from '../../services/employee/employee.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { materialImports } from '../../shared/material';\r\n\r\n\r\n@Component({\r\n  selector: 'app-department-list',\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    ...materialImports\r\n  ],\r\n  templateUrl: './department-list.html',\r\n  styleUrl: './department-list.scss'\r\n})\r\n\r\nexport class DepartmentListComponent {\r\n  department: Department[] = [];\r\n  totalEmployees = 0;\r\n  totalEmpSubscription?: Subscription;\r\n  departmentSubscription?: Subscription;\r\n\r\n  constructor(private departmentService: DepartmentService, private employeeService: EmployeeService) {\r\n    this.loadDepartment();\r\n    this.loadTotalEmployees();\r\n  }\r\n\r\n  loadTotalEmployees() {\r\n    this.totalEmpSubscription = this.employeeService.getEmployees().subscribe((employees) => {\r\n      this.totalEmployees = employees.length;\r\n    });\r\n  }\r\n\r\n  loadDepartment() {\r\n    this.departmentSubscription = this.departmentService.getDepartments().subscribe((data) => {\r\n      this.department = data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.departmentSubscription?.unsubscribe();\r\n    this.totalEmpSubscription?.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./department-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "departmentService",
                        "type": "DepartmentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "departmentService",
                        "type": "DepartmentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"mat-app-background basic-container\">\r\n    <mat-card class=\"department-card\">\r\n        <div class=\"department-header\">\r\n            <h2>Department List</h2>\r\n            <div class=\"employee-count\">\r\n                Total Employees: <span class=\"employee-count-number\">{{ totalEmployees }}</span>\r\n            </div>\r\n        </div>\r\n        <mat-list>\r\n            <mat-list-item class=\"department-list-header\">\r\n                <span class=\"dept-id\">ID</span>\r\n                <span class=\"dept-name\">Department Name</span>\r\n            </mat-list-item>\r\n            <mat-divider></mat-divider>\r\n            @for(item of department; track item.id){\r\n            <mat-list-item>\r\n                <span class=\"dept-id\">{{ item.id }}</span>\r\n                <span class=\"dept-name\">{{ item.name }}</span>\r\n            </mat-list-item>\r\n            <mat-divider></mat-divider>\r\n            }\r\n        </mat-list>\r\n    </mat-card>\r\n</div>"
        },
        {
            "name": "EmployeeFormComponent",
            "id": "component-EmployeeFormComponent-b400f77a32aebe44bc4057a5bfd5763778b78362ad87afb2e29d17ec96b962952d738073bf6e620ef01cb3cd56f15b38f0956a1562dd92efe7ac3ba9113544b1",
            "file": "src/app/pages/home/employee-form/employee-form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./employee-form.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "employee",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Employee | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelled",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "saved",
                    "defaultValue": "new EventEmitter<Employee>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "departments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Department[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "getDepartmentSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, OnInit, output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { materialImports } from '../../../shared/material';\r\nimport { Employee } from '../../../types/employee.model';\r\nimport { Department } from '../../../types/department.model';\r\nimport { DepartmentService } from '../../../services/department/department.service';\r\n\r\n@Component({\r\n  selector: 'app-employee-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ...materialImports\r\n  ],\r\n  templateUrl: './employee-form.html',\r\n  styleUrl: './employee-form.scss'\r\n})\r\n\r\nexport class EmployeeFormComponent implements OnInit {\r\n  @Input() employee: Employee | null = null;\r\n  @Output() saved = new EventEmitter<Employee>();\r\n  @Output() cancelled = new EventEmitter<void>();\r\n\r\n  // saved = output<Employee>();\r\n  // cancelled = output<void>();\r\n\r\n  getDepartmentSubscription: any;\r\n\r\n  form!: FormGroup;\r\n  departments: Department[] = [];\r\n\r\n  constructor(private fb: FormBuilder, private departmentService: DepartmentService) { }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      id: [this.employee?.id],\r\n      name: [this.employee?.name || '', Validators.required],\r\n      email: [this.employee?.email || '', [Validators.required, Validators.email]],\r\n      departmentId: [this.employee?.departmentId.toString() || '', Validators.required],\r\n      salary: [this.employee?.salary || 0, Validators.required]\r\n    });\r\n\r\n    this.getDepartmentSubscription = this.departmentService.getDepartments().subscribe({\r\n      next: (departments) => this.departments = departments,\r\n\r\n      error: (err) => {\r\n        this.departments = [];\r\n        console.error('Error fetching departments:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  get name() {\r\n    return this.form.get('name');\r\n  }\r\n\r\n  get email() {\r\n    return this.form.get('email');\r\n  }\r\n\r\n  get salary() {\r\n    return this.form.get('salary');\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      this.saved.emit(this.form.value);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.cancelled.emit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.getDepartmentSubscription?.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./employee-form.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "departmentService",
                        "type": "DepartmentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "departmentService",
                        "type": "DepartmentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "salary": {
                    "name": "salary",
                    "getSignature": {
                        "name": "salary",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                }
            },
            "templateData": "<div class=\"mat-elevation-z2 form-container\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"employee-form\">\r\n        <h3>{{ form.value.id ? 'Edit Employee' : 'Add New Employee' }}</h3>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Name</mat-label>\r\n            <input matInput placeholder=\"Enter name\" formControlName=\"name\" />\r\n            <mat-error *ngIf=\"name?.invalid && name?.touched\">\r\n                Name is required\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput type=\"email\" placeholder=\"Enter email\" formControlName=\"email\" />\r\n            <mat-error *ngIf=\"email?.invalid && email?.touched\">\r\n                Enter a valid email\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Department</mat-label>\r\n            <mat-select formControlName=\"departmentId\">\r\n                <mat-option *ngFor=\"let dept of departments\" [value]=\"dept.id.toString()\">\r\n                    {{ dept.name }}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Salary</mat-label>\r\n            <input matInput type=\"number\" placeholder=\"Enter Salary\" formControlName=\"salary\" />\r\n            <mat-error *ngIf=\"salary?.invalid && salary?.touched\">\r\n                Enter a valid Salary\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <button matButton=\"elevated\" color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">\r\n            {{ form.value.id ? 'Update' : 'Add' }}\r\n        </button>\r\n        <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\r\n    </form>\r\n</div>"
        },
        {
            "name": "EmployeeListComponent",
            "id": "component-EmployeeListComponent-bddbf463fd2e18b0aa5e6e5e70444b09d6c42559fdadd0fbc2c3564a41e8fe9db4174cd6a6e0fa0b89e7bfaee64279af0a5f770dab36a39a8026aac9d4a538ee",
            "file": "src/app/pages/home/employee-list/employee-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./employee-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEmpSubsciption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<Employee>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "deleteEmpSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'email', 'departmentName', 'salary', 'createdOn', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loadEmpSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "selectedEmployee",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "updateEmpSubsciption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEdit",
                    "args": [
                        {
                            "name": "emp",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emp",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormCancelled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormSaved",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "EmployeeFormComponent",
                    "type": "component"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, OnDestroy, OnInit, AfterViewInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { EmployeeService } from '../../../services/employee/employee.service';\r\nimport { Employee } from '../../../types/employee.model';\r\nimport { EmployeeFormComponent } from '../employee-form/employee-form';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { materialImports } from '../../../shared/material';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    EmployeeFormComponent,\r\n    ...materialImports\r\n  ],\r\n  templateUrl: './employee-list.html',\r\n  styleUrl: './employee-list.scss'\r\n})\r\nexport class EmployeeListComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  displayedColumns = ['name', 'email', 'departmentName', 'salary', 'createdOn', 'actions'];\r\n  dataSource = new MatTableDataSource<Employee>();\r\n  selectedEmployee: Employee | null = null;\r\n  showForm = false;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  loadEmpSubscription?: Subscription;\r\n  deleteEmpSubscription?: Subscription;\r\n  addEmpSubsciption?: Subscription;\r\n  updateEmpSubsciption?: Subscription;\r\n\r\n  constructor(private employeeService: EmployeeService) {\r\n    console.log(\"constructor in emp list\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadEmployees();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  loadEmployees() {\r\n    this.loadEmpSubscription = this.employeeService.getEmployees().subscribe((data) => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  onAdd() {\r\n    this.selectedEmployee = null;\r\n    this.showForm = true;\r\n  }\r\n\r\n  onEdit(emp: Employee) {\r\n    this.selectedEmployee = emp;\r\n    this.showForm = true;\r\n  }\r\n\r\n  onDelete(id: number) {\r\n    if (confirm('Are you sure you want to delete this employee?')) {\r\n      this.deleteEmpSubscription = this.employeeService.deleteEmployee(id).subscribe(() => this.loadEmployees());\r\n    }\r\n  }\r\n\r\n  onFormSaved(employee: Employee) {\r\n    if (employee.id) {\r\n      this.updateEmpSubsciption = this.employeeService.updateEmployee(employee.id, employee).subscribe({\r\n        next: () => {\r\n          this.showForm = false;\r\n          this.loadEmployees();\r\n          alert('Employee updated successfully!!');\r\n        },\r\n        error: (err) => {\r\n          alert(err.error || 'An error occurred while updating!!');\r\n        }\r\n      });\r\n    } else {\r\n      const { name, email, departmentId, salary } = employee;\r\n\r\n      this.addEmpSubsciption = this.employeeService.addEmployee({\r\n        name,\r\n        email,\r\n        departmentId: departmentId.toString(),\r\n        salary: salary ?? 0\r\n      }).subscribe({\r\n        next: () => {\r\n          this.showForm = false;\r\n          this.loadEmployees();\r\n          alert('Employee added successfully!!');\r\n        },\r\n        error: (err) => {\r\n          alert(err.error || 'An error occurred while adding!!');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onFormCancelled() {\r\n    this.showForm = false;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    console.log(\"NgOnDestroy in emp list\");\r\n    this.loadEmpSubscription?.unsubscribe();\r\n    this.deleteEmpSubscription?.unsubscribe();\r\n    this.addEmpSubsciption?.unsubscribe();\r\n    this.updateEmpSubsciption?.unsubscribe();\r\n  }\r\n}\r\n",
            "styleUrl": "./employee-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"mat-app-background basic-container\">\r\n    <div class=\"flex flex-row justify-content-between\">\r\n        <h2>Employee List</h2>\r\n        <div class=\"flex align-items-center justify-content-center\">\r\n            <div class=\"search-container\">\r\n                <mat-form-field appearance=\"outline\" class=\"search-field\">\r\n                    <mat-label>Search Employees</mat-label>\r\n                    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Search Employees\" />\r\n                    <mat-icon matPrefix>search</mat-icon>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <button matButton=\"filled\" (click)=\"onAdd()\">Add New Employee</button>\r\n        </div>\r\n    </div>\r\n\r\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort style=\"width: 100%;\">\r\n        <!-- Name -->\r\n        <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n            <td mat-cell *matCellDef=\"let emp\">{{ emp.name | titlecase }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Email -->\r\n        <ng-container matColumnDef=\"email\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\r\n            <td mat-cell *matCellDef=\"let emp\">{{ emp.email | lowercase }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Department -->\r\n        <ng-container matColumnDef=\"departmentName\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Department</th>\r\n            <td mat-cell *matCellDef=\"let emp\">{{ emp.departmentName }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Salary -->\r\n        <ng-container matColumnDef=\"salary\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Salary</th>\r\n            <td mat-cell *matCellDef=\"let emp\">{{ emp.salary | currency:'INR':'symbol':'1.0-0' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Created On -->\r\n        <ng-container matColumnDef=\"createdOn\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Created On</th>\r\n            <td mat-cell *matCellDef=\"let emp\">{{ emp.createdOn | date:'dd-MMM-yyyy' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Actions -->\r\n        <ng-container matColumnDef=\"actions\">\r\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n            <td mat-cell *matCellDef=\"let emp\">\r\n                <button matButton=\"tonal\" (click)=\"onEdit(emp)\">Edit</button>\r\n                <button matButton=\"outlined\" (click)=\"onDelete(emp.id)\">Delete</button>\r\n            </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n\r\n    <mat-paginator [pageSize]=\"5\" [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n    <app-employee-form *ngIf=\"showForm\" [employee]=\"selectedEmployee\" (saved)=\"onFormSaved($event)\"\r\n        (cancelled)=\"onFormCancelled()\">\r\n    </app-employee-form>\r\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-5760466ae1bb59c3bcac720e0560b554a1f14b91e934a07eb0a61c7f59788ff1f24a428f5e9c1aabb250dd2e5f92d4a6c8a491dfbd1d77ca0d3059ddfdac9d4f",
            "file": "src/app/pages/home/footer/footer.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-toolbar class=\"footer-toolbar\">\n  <span>&copy; 2025 Devisha Gajjar. All rights reserved.</span>\n</mat-toolbar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  standalone: true,\r\n  imports: [MatToolbarModule],\r\n  template: `\r\n    <mat-toolbar class=\"footer-toolbar\">\r\n      <span>&copy; 2025 Devisha Gajjar. All rights reserved.</span>\r\n    </mat-toolbar>\r\n  `,\r\n  styleUrl: \"footer.scss\"\r\n})\r\n\r\nexport class FooterComponent { }\r\n",
            "styleUrl": "footer.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-7b65a919760518c9ed31afa4bb37604bceb9c70dcffe6752797860a4943a0b5d47adb64b65dbbf7e4227f3955fea5efd1c05035e150528806f5c2d2179eb39a3",
            "file": "src/app/pages/auth/login/login.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validationMessages",
                    "defaultValue": "VALIDATION_MESSAGES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGoogleResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginWithFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ReusableButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ReusableMatInputComponent",
                    "type": "component"
                },
                {
                    "name": "ReusableInputControlvalue"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormControl } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReusableButtonComponent } from '../../../shared/components/reusable-button/reusable-button';\r\nimport { AuthService } from '../../../services/auth/auth.service';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { materialImports } from '../../../shared/material';\r\nimport { ReusableMatInputComponent } from '../../../shared/components/reusable-mat-input/reusable-mat-input';\r\nimport { VALIDATION_MESSAGES } from '../../../config/validation-messages';\r\n\r\nimport { ReusableInputControlvalue } from '../../../shared/components/reusable-input-controlvalueaccessor/reusable-input-controlvalueaccessor';\r\n\r\ndeclare const google: any;\r\ndeclare const FB: any;\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ReusableButtonComponent,\r\n    RouterModule,\r\n    ReusableMatInputComponent,\r\n    ReusableInputControlvalue,\r\n    ...materialImports\r\n  ],\r\n  templateUrl: './login.html',\r\n  styleUrls: ['./login.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  hidePassword = true;\r\n  loginForm!: FormGroup;\r\n  validationMessages = VALIDATION_MESSAGES;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private cookieService: CookieService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n    });\r\n\r\n    if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\r\n      console.log(\"if account id\")\r\n      google.accounts.id.initialize({\r\n        client_id: environment.googleClientId,\r\n        callback: (response: any) => {\r\n          this.handleGoogleResponse(response);\r\n          console.log(\"response\" + response);\r\n\r\n        },\r\n        ux_mode: 'popup'\r\n      });\r\n\r\n      google.accounts.id.renderButton(\r\n        document.getElementById('googleSignInDiv'),\r\n        { theme: 'outline', size: 'large' }\r\n      );\r\n    } else {\r\n      console.error('Google Identity Services SDK not loaded.');\r\n    }\r\n  }\r\n\r\n  handleGoogleResponse(response: any) {\r\n    const idToken = response.credential;\r\n\r\n    this.authService.googleLogin({ idToken }).subscribe({\r\n      next: (res) => {\r\n        this.cookieService.set('token', res.token);\r\n        this.toastr.success('Google login successful');\r\n        this.router.navigate(['/app/home']);\r\n      },\r\n      error: () => {\r\n        this.toastr.error('Google login failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  loginWithFacebook() {\r\n    FB.login((response: any) => {\r\n      if (response.authResponse) {\r\n        const accessToken = response.authResponse.accessToken;\r\n\r\n        this.authService.facebookLogin({ accessToken }).subscribe({\r\n          next: (res) => {\r\n            this.cookieService.set('token', res.token);\r\n            this.toastr.success('Facebook login successful');\r\n            this.router.navigate(['/app/home']);\r\n          },\r\n          error: () => {\r\n            this.toastr.error('Facebook login failed');\r\n          }\r\n        });\r\n      } else {\r\n        this.toastr.error('Facebook login cancelled or failed');\r\n      }\r\n    }, { scope: 'email,public_profile' });\r\n  }\r\n\r\n  submit() {\r\n    if (this.loginForm.valid) {\r\n      const credentials = {\r\n        UsernameOrEmail: this.loginForm.value.email,\r\n        Password: this.loginForm.value.password\r\n      };\r\n\r\n      this.authService.login(credentials).subscribe({\r\n        next: (response) => {\r\n          const expireDate = new Date();\r\n          expireDate.setHours(expireDate.getHours() + 1);\r\n          this.cookieService.set('token', response.token, expireDate, '/', '', true, 'Strict');\r\n\r\n          this.toastr.success('Login successful!', 'Success');\r\n          this.router.navigate(['/app/home']);\r\n        },\r\n        error: (err) => {\r\n          this.toastr.error('Login Failed!', 'Error');\r\n        }\r\n      });\r\n    } else {\r\n      this.loginForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.loginForm.reset();\r\n  }\r\n\r\n  get emailControl(): FormControl {\r\n    return this.loginForm.get('email') as FormControl;\r\n  }\r\n\r\n  get passwordControl(): FormControl {\r\n    return this.loginForm.get('password') as FormControl;\r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-card {\r\n  max-width: 1000px;\r\n  margin: 3rem auto;\r\n  padding: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .login-image {\r\n  width: 200px;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); \r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 1.5rem;\r\n    font-weight: 600;\r\n  }\r\n\r\n  form {\r\n    width: 100%;\r\n\r\n    .full-width {\r\n      width: 100%;\r\n    }\r\n\r\n    .buttons-container {\r\n      margin-top: 1.5rem;\r\n      display: flex;\r\n      gap: 1rem;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  .register-link {\r\n    margin-top: 1rem;\r\n    text-align: center;\r\n    font-size: 0.9rem;\r\n\r\n    a {\r\n      text-decoration: none;\r\n      font-weight: 600;\r\n      color: #3f51b5;\r\n\r\n      &:hover {\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 139
                    }
                },
                "passwordControl": {
                    "name": "passwordControl",
                    "getSignature": {
                        "name": "passwordControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 143
                    }
                }
            },
            "templateData": "<mat-card appearance=\"outlined\" class=\"login-card\">\r\n    <img src=\"/assets/images/login.jpg\" alt=\"Login Illustration\" class=\"login-image\" />\r\n\r\n    <h2>Login</h2>\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\">\r\n        <app-reusable-mat-input label=\"Email\" type=\"email\" [control]=\"emailControl\" [required]=\"true\"\r\n            [validationMessages]=\"validationMessages.email\" autocomplete=\" email\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Password\" type=\"password\" [control]=\"passwordControl\" [required]=\"true\"\r\n            [validationMessages]=\"validationMessages.password\" autocomplete=\"current-password\"></app-reusable-mat-input>\r\n\r\n\r\n        <!-- <app-reusable-input-controlvalue formControlName=\"email\" controlName=\"email\" label=\"Email\"\r\n            type=\"email\"></app-reusable-input-controlvalue> -->\r\n\r\n        <div class=\"buttons-container\">\r\n            <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loginForm.invalid\">\r\n                Login\r\n            </button>\r\n            <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n    </form>\r\n    <p class=\"register-link\">\r\n        Not a user? <a routerLink=\"/register\">Register here</a>\r\n    </p>\r\n\r\n    <div id=\"googleSignInDiv\">login with google</div>\r\n\r\n    <!-- <div>\r\n        <button (click)=\"loginWithFacebook()\" class=\"facebook-button\">\r\n            Login with Facebook\r\n        </button>\r\n    </div> -->\r\n</mat-card>"
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-dbbe1044453ccd1cef8f021420947197874a9f917e58bb5ca6fab765e7cd06e4adac0e4c628cc0ba900d91c2282494affca42a1e16f03d42e31eba55ee5ea0a4",
            "file": "src/app/layout/main-layout/main-layout.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-layout.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NavbarComponent } from '../../pages/home/navbar/navbar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { FooterComponent } from '../../pages/home/footer/footer';\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  imports: [NavbarComponent, RouterOutlet, FooterComponent],\r\n  templateUrl: './main-layout.html',\r\n  styleUrl: './main-layout.scss'\r\n})\r\nexport class MainLayoutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./main-layout.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar></app-navbar>\r\n<div class=\"page-content\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n<app-footer></app-footer>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-22f59d8c78995ce5cc54a805cef809661a3e46e96592a0227eca1d3f231177a2083acd885d9fa5e278a164621dd0689d9a0a78ebf8752db746f2e8de77b2c07e",
            "file": "src/app/pages/home/navbar/navbar.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "navbar.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirmLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { ConfirmDialogComponent, ConfirmDialogData } from '../../../shared/components/confirm-dialog/confirm-dialog';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterModule],\r\n  templateUrl: \"navbar.html\",\r\n  styleUrl: \"navbar.scss\"\r\n})\r\n\r\nexport class NavbarComponent {\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private router: Router,\r\n    private cookieService: CookieService) { }\r\n\r\n  confirmLogout() {\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      width: '90vw',\r\n      maxWidth: '600px',\r\n      maxHeight: '80vh',\r\n      hasBackdrop: true,\r\n      data: <ConfirmDialogData>{\r\n        title: 'Logout Confirmation',\r\n        message: 'Are you sure you want to log out?',\r\n        confirmText: 'Logout',\r\n        cancelText: 'Stay'\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.logout();\r\n      }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.cookieService.delete('token', '/');\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n",
            "styleUrl": "navbar.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-toolbar class=\"navbar\">\r\n    <span class=\"nav-logo\">Employee Management</span>\r\n\r\n    <button class=\"nav-button\" matButton routerLink=\"/app/home\" routerLinkActive=\"active-link\">Home</button>\r\n    <a class=\"nav-button\" matButton routerLink=\"/app/department\" routerLinkActive=\"active-link\">Department</a>\r\n    <button class=\"nav-button\" matButton routerLink=\"/app/about\" routerLinkActive=\"active-link\">About</button>\r\n\r\n    <button matIconButton class=\"logout-btn\" (click)=\"confirmLogout()\">\r\n        <mat-icon>logout</mat-icon>\r\n    </button>\r\n</mat-toolbar>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-12c39c9865c362fc707a042d1faecb4ca1530b84436c9a0e0f5a77173d6044c2e282114882a3590d5b163395c6060efb98cf7ef59c5a4bece83cfaebdca52b48",
            "file": "src/app/pages/auth/register/register.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hideConfirmPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordMatchValidator",
                    "args": [
                        {
                            "name": "group",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ReusableButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ReusableMatInputComponent",
                    "type": "component"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReusableButtonComponent } from '../../../shared/components/reusable-button/reusable-button';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { passwordMatchValidator } from '../../../shared/validators/password-match.validator';\r\nimport { materialImports } from '../../../shared/material';\r\nimport { ReusableMatInputComponent } from '../../../shared/components/reusable-mat-input/reusable-mat-input';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ReusableButtonComponent,\r\n    RouterModule,\r\n    ReusableMatInputComponent,\r\n    ...materialImports\r\n  ],\r\n  templateUrl: './register.html',\r\n  styleUrls: ['./register.scss']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n\r\n  registerForm!: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private toastr: ToastrService) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.fb.group({\r\n      first_name: ['', [Validators.required, Validators.maxLength(255)]],\r\n      last_name: [''],\r\n      username: [''],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [\r\n        Validators.required,\r\n        Validators.pattern('^(?=.*[A-Z])(?=.*\\\\d).+$')\r\n      ]],\r\n      confirmPassword: ['', [Validators.required]],\r\n      phone: [''],\r\n      address: [''],\r\n      zipcode: [''],\r\n    }, { validators: passwordMatchValidator });\r\n  }\r\n\r\n  passwordMatchValidator(group: AbstractControl): ValidationErrors | null {\r\n    const password = group.get('password')?.value;\r\n    const confirm = group.get('confirmPassword')?.value;\r\n    return password === confirm ? null : { passwordMismatch: true };\r\n  }\r\n\r\n  submit() {\r\n    if (this.registerForm.valid) {\r\n      this.toastr.success('Registration Suceessful!!', 'Success')\r\n    } else {\r\n      this.toastr.error('Registration Failed!!', 'Failed')\r\n      this.registerForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.registerForm.reset();\r\n  }\r\n\r\n  // Getters for cleaner template access\r\n  get firstName() {\r\n    return this.registerForm.get('first_name');\r\n  }\r\n\r\n  get lastName() {\r\n    return this.registerForm.get('last_name');\r\n  }\r\n\r\n  get username() {\r\n    return this.registerForm.get('username');\r\n  }\r\n\r\n  get email() {\r\n    return this.registerForm.get('email');\r\n  }\r\n\r\n  get password() {\r\n    return this.registerForm.get('password');\r\n  }\r\n\r\n  get confirmPassword() {\r\n    return this.registerForm.get('confirmPassword');\r\n  }\r\n\r\n  get phone() {\r\n    return this.registerForm.get('phone');\r\n  }\r\n\r\n  get address() {\r\n    return this.registerForm.get('address');\r\n  }\r\n\r\n  get zipcode() {\r\n    return this.registerForm.get('zipcode');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\r\n  width: 100%;\r\n}\r\n\r\n.buttons-container {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.register-card {\r\n  max-width: 700px;\r\n  margin: 2rem auto;\r\n  padding: 2rem;\r\n}\r\n\r\n\r\n.login-link {\r\n    margin-top: 1rem;\r\n    text-align: left;\r\n    font-size: 0.9rem;\r\n\r\n    a {\r\n      text-decoration: none;\r\n      font-weight: 600;\r\n      color: #3f51b5;\r\n\r\n      &:hover {\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  }\r\n",
                    "styleUrl": "./register.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "firstName": {
                    "name": "firstName",
                    "getSignature": {
                        "name": "firstName",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "lastName": {
                    "name": "lastName",
                    "getSignature": {
                        "name": "lastName",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "getSignature": {
                        "name": "confirmPassword",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "address": {
                    "name": "address",
                    "getSignature": {
                        "name": "address",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "zipcode": {
                    "name": "zipcode",
                    "getSignature": {
                        "name": "zipcode",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            },
            "templateData": "<mat-card appearance=\"outlined\" class=\"register-card\">\r\n    <h2>Register</h2>\r\n\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\r\n\r\n        <app-reusable-mat-input label=\"First Name\" formControlName=\"first_name\" type=\"text\"\r\n            autocomplete=\"given-name\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Last Name\" formControlName=\"last_name\" type=\"text\"\r\n            autocomplete=\"family-name\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Username\" formControlName=\"username\" type=\"text\"\r\n            autocomplete=\"username\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Email\" formControlName=\"email\" type=\"email\"\r\n            autocomplete=\"email\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Password\" formControlName=\"password\" type=\"password\"\r\n            autocomplete=\"new-password\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Confirm Password\" formControlName=\"confirmPassword\" type=\"password\"\r\n            autocomplete=\"new-password\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Phone\" formControlName=\"phone\" type=\"tel\"\r\n            autocomplete=\"tel\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Address\" formControlName=\"address\" type=\"text\"\r\n            autocomplete=\"street-address\"></app-reusable-mat-input>\r\n\r\n        <app-reusable-mat-input label=\"Zipcode\" formControlName=\"zipcode\" type=\"text\"\r\n            autocomplete=\"postal-code\"></app-reusable-mat-input>\r\n\r\n        <div class=\"buttons-container\">\r\n            <button type=\"submit\" color=\"primary\" mat-raised-button [disabled]=\"registerForm.invalid\">\r\n                Register\r\n            </button>\r\n\r\n            <button type=\"button\" color=\"warn\" mat-raised-button (click)=\"cancel()\">\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    </form>\r\n\r\n    <p class=\"login-link\">\r\n        Already a user? <a routerLink=\"/login\">Login here</a>\r\n    </p>\r\n</mat-card>"
        },
        {
            "name": "ReusableButtonComponent",
            "id": "component-ReusableButtonComponent-23bad0816e0974760741bc61b3cb6bad2f929a59c014481e9e48ea572f79e96dbe7afdcfc908e6fcef5add7660a0f8ebd1f3800284179b5949802c3aadb7e1b4",
            "file": "src/app/shared/components/reusable-button/reusable-button.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reusable-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reusable-button.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"primary\" | \"accent\" | \"warn\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@Component({\r\n  selector: 'app-reusable-button',\r\n  imports: [MatButtonModule],\r\n  templateUrl: './reusable-button.html',\r\n  styleUrl: './reusable-button.scss'\r\n})\r\n\r\n\r\nexport class ReusableButtonComponent {\r\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\r\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\r\n  @Input() disabled = false;\r\n\r\n  onClick(event: Event) {\r\n    // Optional: you can emit events if needed\r\n    console.log(\"button clicked!!\");\r\n  }\r\n}\r\n",
            "styleUrl": "./reusable-button.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button matButton=\"outlined\" [color]=\"color\" [type]=\"type\" [disabled]=\"disabled\" (click)=\"onClick($event)\">\r\n    <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "ReusableInputControlvalue",
            "id": "component-ReusableInputControlvalue-412cb155555e4f5460d53b99f8346f30ed719410557e9d3816299cfd52d18538f1f1a2559c34975f68691d320171caa57da8f82f72ab4ea4e9a159a91957ffde",
            "file": "src/app/shared/components/reusable-input-controlvalueaccessor/reusable-input-controlvalueaccessor.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ReusableInputControlvalue), multi: true,\n}"
                }
            ],
            "selector": "app-form-field",
            "styleUrls": [
                "./reusable-input-controlvalueaccessor.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reusable-input-controlvalueaccessor.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validators",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n\r\n@Component({\r\n  selector: 'app-form-field',\r\n  templateUrl: './reusable-input-controlvalueaccessor.html',\r\n  imports: [ReactiveFormsModule, CommonModule, MatFormFieldModule],\r\n  styleUrls: ['./reusable-input-controlvalueaccessor.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReusableInputControlvalue),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class ReusableInputControlvalue implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() type: string = 'text';\r\n  @Input() placeholder: string = '';\r\n  @Input() required: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input() validators: any[] = [];\r\n\r\n  formControl = new FormControl('');\r\n\r\n  private onChange: (value: any) => void = () => { };\r\n  private onTouched: () => void = () => { };\r\n\r\n  ngOnInit() {\r\n    if (this.required) {\r\n      this.validators.push(Validators.required);\r\n    }\r\n    this.formControl.setValidators(this.validators);\r\n    if (this.disabled) {\r\n      this.formControl.disable();\r\n    }\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.formControl.setValue(value, { emitEvent: false });\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n    this.formControl.valueChanges.subscribe(fn);\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    isDisabled ? this.formControl.disable() : this.formControl.enable();\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reusable-input-controlvalueaccessor.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<!-- <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n    <mat-label>{{ label }}</mat-label>\r\n    <input [type]=\"type\" matInput [formControl]=\"formControl\" [errorStateMatcher]=\"matcher\" [placeholder]=\"placeholder\">\r\n    <mat-error *ngIf=\"formControl.errors?.['required']\">{{ label }} is required.</mat-error>\r\n    <mat-error *ngIf=\"formControl.errors?.['email']\">Invalid email format.</mat-error>\r\n    <mat-error *ngIf=\"formControl.errors?.['minlength']\">\r\n        {{ label }} must be at least {{ formControl.errors?.['minlength'].requiredLength }} characters.\r\n    </mat-error>\r\n</mat-form-field> -->"
        },
        {
            "name": "ReusableMatInputComponent",
            "id": "component-ReusableMatInputComponent-c4dbfc9d4f1823f60eaddc582068a853fce36b5c5cf81edf2c16a466a3b33fcfc6ab1959ac1d5d952b0a330353d83738c5fc8005486111b6bf7e2fd3c1034db0",
            "file": "src/app/shared/components/reusable-mat-input/reusable-mat-input.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reusable-mat-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reusable-mat-input.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validationMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputId",
                    "defaultValue": "`input-${Math.random().toString(36).slice(2)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "errorKeys",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormControl } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-reusable-mat-input',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule],\r\n  templateUrl: './reusable-mat-input.html',\r\n  styleUrl: './reusable-mat-input.scss',\r\n})\r\nexport class ReusableMatInputComponent {\r\n  @Input() label?: string;\r\n  @Input() placeholder = '';\r\n  @Input() type = 'text';\r\n  @Input() required = false;\r\n  @Input() control!: FormControl;\r\n  @Input() disabled = false;\r\n  @Input() autocomplete = '';\r\n  @Input() validationMessages: { [key: string]: string } = {};\r\n\r\n  inputId = `input-${Math.random().toString(36).slice(2)}`;\r\n\r\n  errorKeys(): string[] {\r\n    return this.control && this.control.errors ? Object.keys(this.control.errors) : [];\r\n  }\r\n\r\n  getErrorMessage(errorKey: string, errorValue: any): string {\r\n    if (this.validationMessages[errorKey]) {\r\n      return this.validationMessages[errorKey].replace(\r\n        /\\{\\{(.*?)\\}\\}/g,\r\n        (_, token) => errorValue[token.trim()] || ''\r\n      );\r\n    }\r\n\r\n    const defaultMessages: { [key: string]: string } = {\r\n      required: 'This field is required.',\r\n      minlength: `Minimum length is ${errorValue.requiredLength}.`,\r\n      maxlength: `Maximum length is ${errorValue.requiredLength}.`,\r\n      email: 'Invalid email format.',\r\n    };\r\n\r\n    return defaultMessages[errorKey] || 'Invalid field.';\r\n  }\r\n}\r\n",
            "styleUrl": "./reusable-mat-input.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n    <mat-label>{{ label }} <span *ngIf=\"required\" class=\"required\"></span></mat-label>\r\n\r\n    <input matInput [type]=\"type\" [formControl]=\"control\" [placeholder]=\"placeholder\" [id]=\"inputId\"\r\n        [autocomplete]=\"autocomplete\" />\r\n\r\n    <!-- <mat-error *ngIf=\"control?.invalid && (control?.touched || control?.dirty)\" [id]=\"inputId + '-error'\">\r\n        <span *ngIf=\"control.errors?.['required']\">This field is required.</span>\r\n        <div *ngIf=\"control.errors?.['email']\">Invalid email format.</div>\r\n    </mat-error> -->\r\n\r\n    <mat-error *ngIf=\"control?.invalid && (control?.touched || control?.dirty)\" [id]=\"inputId + '-error'\">\r\n        <ng-container *ngFor=\"let errorKey of errorKeys()\">\r\n            <div *ngIf=\"control.errors?.[errorKey]\">\r\n                {{ getErrorMessage(errorKey, control.errors && control.errors[errorKey]) }}\r\n            </div>\r\n        </ng-container>\r\n    </mat-error>\r\n</mat-form-field>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes)\r\n  ]\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gaurds/auth-guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "() => {\r\n  const router = inject(Router);\r\n  const cookieService = inject(CookieService);\r\n\r\n  const token = cookieService.get('token');\r\n\r\n  if (token) {\r\n    return true;\r\n  } else {\r\n    router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interceptor/auth-interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const cookieService = inject(CookieService);\r\n  const token = cookieService.get('token');\r\n\r\n  if (token) {\r\n    const cloned = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return next(cloned);\r\n  }\r\n\r\n  return next(req);\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    googleClientId: '766613231208-vtvrekunpd3j4lg4j31ropef2vq1uspe.apps.googleusercontent.com'\r\n}"
            },
            {
                "name": "FB",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/auth/login/login.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "google",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/auth/login/login.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "materialImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatCard,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule\r\n]"
            },
            {
                "name": "passwordMatchValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/validators/password-match.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\r\n    const password = control.get('password');\r\n    const confirmPassword = control.get('confirmPassword');\r\n\r\n    if (!password || !confirmPassword) return null;\r\n\r\n    const isMatch = password.value === confirmPassword.value;\r\n\r\n    if (!isMatch) {\r\n        confirmPassword.setErrors({ passwordMismatch: true });\r\n        return { passwordMismatch: true };\r\n    } else {\r\n        if (confirmPassword.hasError('passwordMismatch')) {\r\n            confirmPassword.setErrors(null);\r\n        }\r\n        return null;\r\n    }\r\n}"
            },
            {
                "name": "VALIDATION_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/validation-messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    username: {\r\n        required: 'Username is required',\r\n        maxlength: 'Username cannot exceed {{ requiredLength }} characters',\r\n        minlength: 'Username must be at least {{ requiredLength }} characters',\r\n    },\r\n    email: {\r\n        required: 'Email is required',\r\n        email: 'Please enter a valid email address',\r\n    },\r\n    password: {\r\n        required: 'Password is required',\r\n        minlength: 'Password must be at least {{ requiredLength }} characters',\r\n    },\r\n    // add more fields as needed\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/config/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes)\r\n  ]\r\n}"
                }
            ],
            "src/app/gaurds/auth-guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gaurds/auth-guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "() => {\r\n  const router = inject(Router);\r\n  const cookieService = inject(CookieService);\r\n\r\n  const token = cookieService.get('token');\r\n\r\n  if (token) {\r\n    return true;\r\n  } else {\r\n    router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}"
                }
            ],
            "src/app/interceptor/auth-interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interceptor/auth-interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const cookieService = inject(CookieService);\r\n  const token = cookieService.get('token');\r\n\r\n  if (token) {\r\n    const cloned = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return next(cloned);\r\n  }\r\n\r\n  return next(req);\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    googleClientId: '766613231208-vtvrekunpd3j4lg4j31ropef2vq1uspe.apps.googleusercontent.com'\r\n}"
                }
            ],
            "src/app/pages/auth/login/login.ts": [
                {
                    "name": "FB",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/auth/login/login.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "google",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/auth/login/login.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/shared/material.ts": [
                {
                    "name": "materialImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatCard,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule\r\n]"
                }
            ],
            "src/app/shared/validators/password-match.validator.ts": [
                {
                    "name": "passwordMatchValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/validators/password-match.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\r\n    const password = control.get('password');\r\n    const confirmPassword = control.get('confirmPassword');\r\n\r\n    if (!password || !confirmPassword) return null;\r\n\r\n    const isMatch = password.value === confirmPassword.value;\r\n\r\n    if (!isMatch) {\r\n        confirmPassword.setErrors({ passwordMismatch: true });\r\n        return { passwordMismatch: true };\r\n    } else {\r\n        if (confirmPassword.hasError('passwordMismatch')) {\r\n            confirmPassword.setErrors(null);\r\n        }\r\n        return null;\r\n    }\r\n}"
                }
            ],
            "src/app/config/validation-messages.ts": [
                {
                    "name": "VALIDATION_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/validation-messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    username: {\r\n        required: 'Username is required',\r\n        maxlength: 'Username cannot exceed {{ requiredLength }} characters',\r\n        minlength: 'Username must be at least {{ requiredLength }} characters',\r\n    },\r\n    email: {\r\n        required: 'Email is required',\r\n        email: 'Please enter a valid email address',\r\n    },\r\n    password: {\r\n        required: 'Password is required',\r\n        minlength: 'Password must be at least {{ requiredLength }} characters',\r\n    },\r\n    // add more fields as needed\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/validation-messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/gaurds/auth-guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptor/auth-interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/auth-layout/auth-layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main-layout/main-layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/about/about-info.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FB",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "google",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/register/register.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/department/department-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "DepartmentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/employee-form/employee-form.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/employee-list/employee-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/footer/footer.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/navbar/navbar.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/department/department.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DepartmentService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/employee/employee.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EmployeeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-dialog/confirm-dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-dialog/confirm-dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reusable-button/reusable-button.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReusableButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reusable-input-controlvalueaccessor/reusable-input-controlvalueaccessor.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReusableInputControlvalue",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reusable-mat-input/reusable-mat-input.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReusableMatInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materialImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/password-match.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordMatchValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/department.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Department",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/employee.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Employee",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}